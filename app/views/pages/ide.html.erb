<pre><code data-role="ide" contenteditable="">
rule("init globals")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(C, Vector(15.230, 2.180, 25.550));
		Set Global Variable(D, Vector(0, 0, 1));
		Set Global Variable(B, 0);
		Set Global Variable(M, 0);
		Set Global Variable(R, 20);
		Set Global Variable(T, 1.400);
		Set Global Variable(S, 0);
		Set Global Variable(E, False);
		Disable Built-In Game Mode Completion;
		Pause Match Time;
	}
}

rule("debug hud")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	conditions
	{
		False == True;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Position Of(Event Player), Null, Null, Left, 0, White, White, White,
			Visible To and String);
		Create HUD Text(All Players(All Teams), Facing Direction Of(Event Player), Null, Null, Left, 0, White, White, White,
			Visible To and String);
		Create HUD Text(All Players(All Teams), Horizontal Angle From Direction(Facing Direction Of(Event Player)), Null, Null, Left, 0,
			White, White, White, Visible To and String);
		Create HUD Text(All Players(All Teams), Vertical Angle From Direction(Facing Direction Of(Event Player)), Null, Null, Left, 0,
			White, White, White, Visible To and String);
	}
}

rule("bot loop")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Has Spawned(Players In Slot(0, Team 2)) == True;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Teleport(Players In Slot(0, Team 2), Global Variable(A));
		Loop;
	}
}

rule("respawn bot")
{
	event
	{
		Player Died;
		Team 2;
		Slot 0;
	}

	actions
	{
		Resurrect(Event Player);
	}
}

rule("init player")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Global Variable(C));
		Set Facing(Event Player, Global Variable(D), To World);
		Set Status(Event Player, Null, Rooted, 10000);
		Set Respawn Max Time(Event Player, 0.500);
	}
}

rule("HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), String("{0} {1}", String("Critical", Null, Null, Null), String("{0}%", Divide(Multiply(
			Global Variable(G), 100), Global Variable(B)), Null, Null), Null), Null, Null, Left, 0, Purple, White, White,
			Visible To and String);
		Create HUD Text(All Players(All Teams), String("{0}: {1}", String("Critical", Null, Null, Null), Global Variable(G), Null), Null,
			Null, Left, 0, Green, White, White, Visible To and String);
		Create HUD Text(All Players(All Teams), String("{0}%", Divide(Multiply(Global Variable(B), 100), Add(Global Variable(B),
			Global Variable(M))), Null, Null), Null, Null, Left, 0, Purple, White, White, Visible To and String);
		Create HUD Text(All Players(All Teams), String("{0}: {1}", String("Failed", Null, Null, Null), Global Variable(M), Null), Null,
			Null, Left, 0, Red, White, White, Visible To and String);
		Create HUD Text(All Players(All Teams), String("{0}: {1}", String("Score", Null, Null, Null), Global Variable(B), Null), Null,
			Null, Left, 0, Green, White, White, Visible To and String);
	}
}

rule("increase difficulty on interact")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Global Variable(E) == False;
	}

	actions
	{
		Set Global Variable(S, Modulo(Add(Global Variable(S), 1), 3));
		Wait(0.250, Ignore Condition);
		Big Message(All Players(Team 1), String("{0} {1}", String("Level", Null, Null, Null), Global Variable(S), Null));
	}
}

rule("on game not started")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Global Variable(E) == False;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Green, Add(Eye Position(Event Player), Multiply(Direction From Angles(
			Horizontal Angle From Direction(Global Variable(D)), Vertical Angle From Direction(Global Variable(D))), Global Variable(I))),
			0.500, Visible To Position and Radius);
		Create In-World Text(All Players(Team 1), String("Start", Null, Null, Null), Add(Eye Position(Event Player), Multiply(
			Direction From Angles(Horizontal Angle From Direction(Global Variable(D)), Vertical Angle From Direction(Global Variable(D))),
			Global Variable(I))), 1, Clip Against Surfaces, Visible To Position and String);
	}
}

rule("on game start")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(E) == True;
	}

	actions
	{
		Destroy All Effects;
		Destroy All In-World Text;
		Set Global Variable(M, 0);
		Set Global Variable(B, 0);
		Set Global Variable(G, 0);
		Set Match Time(90);
		Unpause Match Time;
		Wait(0.016, Ignore Condition);
		Set Global Variable(H, 0);
	}
}

rule("on click start sphere")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	conditions
	{
		Dot Product(Facing Direction Of(Event Player), Global Variable(D)) > Cosine From Degrees(Global Variable(J));
		Is Firing Primary(Event Player) == True;
		Global Variable(E) == False;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Set Global Variable(H, -1.000);
		Set Global Variable(E, True);
	}
}

rule("hit target")
{
	event
	{
		Player took damage;
		Team 2;
		Slot 0;
	}

	conditions
	{
		Global Variable(E) == True;
		Global Variable(H) == 1;
	}

	actions
	{
		Set Global Variable(B, Add(Global Variable(B), 1));
		Set Global Variable(H, 2);
		Set Global Variable(A, Add(Global Variable(A), Vector(0, 10000, 0)));
		Abort If(Not(Event Was Critical Hit));
		Set Global Variable(G, Add(Global Variable(G), 1));
	}
}

rule("on miss target")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Global Variable(H) == 1;
		Global Variable(E) == True;
	}

	actions
	{
		Wait(0.050, Ignore Condition);
		Abort If(Compare(Global Variable(H), ==, 2));
		Set Global Variable(M, Add(Global Variable(M), 1));
		Set Global Variable(A, Add(Global Variable(A), Vector(0, 10000, 0)));
		Set Global Variable(H, 0);
	}
}

rule("spawn target")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(H) == 1;
		Global Variable(E) == True;
	}

	actions
	{
		Set Global Variable(U, Random Real(Multiply(Global Variable(P), -1.000), Global Variable(P)));
		Set Global Variable(V, Random Real(Multiply(Global Variable(Q), -1.000), Global Variable(Q)));
		Set Global Variable(A, Add(Global Variable(C), Multiply(Direction From Angles(Add(Horizontal Angle From Direction(Global Variable(
			D)), Global Variable(U)), Add(Vertical Angle From Direction(Global Variable(D)), Global Variable(V))), Global Variable(R))));
		Wait(Global Variable(T), Abort When False);
		Set Global Variable(M, Add(Global Variable(M), 1));
		Set Global Variable(A, Add(Global Variable(A), Vector(0, 10000, 0)));
		Set Global Variable(H, 0);
	}
}

rule("on hover ready")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	conditions
	{
		Dot Product(Facing Direction Of(Event Player), Global Variable(D)) > Cosine From Degrees(Global Variable(J));
		Global Variable(E) == True;
		Or(Compare(Global Variable(H), ==, 0), Compare(Global Variable(H), ==, 2)) == True;
	}

	actions
	{
		Wait(0.016, Abort When False);
		Set Global Variable(H, 1);
	}
}

rule("show hover sphere")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	conditions
	{
		Global Variable(E) == True;
		Or(Compare(Global Variable(H), ==, 0), Compare(Global Variable(H), ==, 2)) == True;
	}

	actions
	{
		Create Effect(All Players(Team 1), Sphere, White, Add(Eye Position(Event Player), Multiply(Direction From Angles(
			Horizontal Angle From Direction(Global Variable(D)), Vertical Angle From Direction(Global Variable(D))), Global Variable(I))),
			0.500, Visible To Position and Radius);
		Create In-World Text(All Players(Team 1), String("Recover", Null, Null, Null), Add(Eye Position(Event Player), Multiply(
			Direction From Angles(Horizontal Angle From Direction(Global Variable(D)), Vertical Angle From Direction(Global Variable(D))),
			Global Variable(I))), 1, Clip Against Surfaces, Visible To Position and String);
	}
}

rule("destroy hover sphere")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	conditions
	{
		Global Variable(H) == 1;
		Global Variable(E) == True;
	}

	actions
	{
		Destroy All Effects;
		Destroy All In-World Text;
	}
}

rule("on match finish")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Match Time == 0;
	}

	actions
	{
		Set Global Variable(E, False);
		Big Message(All Players(Team 1), String("{0} {1}", String("Time", Null, Null, Null), String("Over", Null, Null, Null), Null));
		Set Global Variable(A, Add(Global Variable(A), Vector(0, 10000, 0)));
		Destroy All Effects;
		Destroy All In-World Text;
		Pause Match Time;
		Set Match Time(3599);
	}
}

rule("restart on interact")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Global Variable(E) == True;
	}

	actions
	{
		Big Message(All Players(Team 1), String("I Give Up", Null, Null, Null));
		Set Global Variable(A, Add(Global Variable(A), Vector(0, 10000, 0)));
		Destroy All Effects;
		Destroy All In-World Text;
		Pause Match Time;
		Set Match Time(3599);
		Wait(0.500, Ignore Condition);
		Set Global Variable(A, Add(Global Variable(A), Vector(0, 10000, 0)));
		Set Global Variable(E, False);
	}
}

rule("Go to spawn with Q")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	conditions
	{
		Global Variable(E) == False;
		Global Variable(W) == False;
		Is Button Held(Event Player, Ultimate) == True;
	}

	actions
	{
		Damage(Event Player, Null, 1000);
		Set Global Variable(W, True);
	}
}

rule("get out of spawn with Q")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	conditions
	{
		Global Variable(E) == False;
		Global Variable(W) == True;
		Is Button Held(Event Player, Ultimate) == True;
	}

	actions
	{
		Damage(Event Player, Null, 1000);
		Teleport(Event Player, Global Variable(C));
		Set Facing(Event Player, Global Variable(D), To World);
		Set Respawn Max Time(Event Player, 0.500);
	}
}

rule("ashe settings")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Hero Of(Players In Slot(0, Team 1)) == Hero(Ashe);
		Has Spawned(Players In Slot(0, Team 1)) == True;
	}

	actions
	{
		Set Global Variable(P, 22);
		Set Global Variable(Q, 12);
		Set Global Variable(I, 50);
		Set Global Variable(J, 0.590);
	}
}

rule("ana settings")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Hero Of(Players In Slot(0, Team 1)) == Hero(Ana);
		Has Spawned(Players In Slot(0, Team 1)) == True;
	}

	actions
	{
		Set Global Variable(P, 22);
		Set Global Variable(Q, 12);
		Set Global Variable(I, 50);
		Set Global Variable(J, 0.590);
	}
}

rule("widow settings")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Hero Of(Players In Slot(0, Team 1)) == Hero(Widowmaker);
		Has Spawned(Players In Slot(0, Team 1)) == True;
	}

	actions
	{
		Set Global Variable(P, 22);
		Set Global Variable(Q, 12);
		Set Global Variable(I, 50);
		Set Global Variable(J, 0.590);
	}
}

rule("mccree settings")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Hero Of(Players In Slot(0, Team 1)) == Hero(McCree);
		Has Spawned(Players In Slot(0, Team 1)) == True;
	}

	actions
	{
		Set Global Variable(P, 38);
		Set Global Variable(Q, 17);
		Set Global Variable(I, 25);
		Set Global Variable(J, 1.100);
	}
}

rule("mccree level 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(S) == 0;
		Hero Of(Players In Slot(0, Team 1)) == Hero(McCree);
	}

	actions
	{
		Set Global Variable(T, 2);
		Set Global Variable(R, 13);
	}
}

rule("mccree level 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(S) == 1;
		Hero Of(Players In Slot(0, Team 1)) == Hero(McCree);
	}

	actions
	{
		Set Global Variable(T, 1.200);
		Set Global Variable(R, 22);
	}
}

rule("mccree level 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(S) == 2;
		Hero Of(Players In Slot(0, Team 1)) == Hero(McCree);
	}

	actions
	{
		Set Global Variable(T, 0.700);
		Set Global Variable(R, 30);
	}
}

rule("widow level 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(S) == 0;
		Hero Of(Players In Slot(0, Team 1)) == Hero(Widowmaker);
	}

	actions
	{
		Set Global Variable(T, 2);
		Set Global Variable(R, 20);
	}
}

rule("widow level 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(S) == 1;
		Hero Of(Players In Slot(0, Team 1)) == Hero(Widowmaker);
	}

	actions
	{
		Set Global Variable(T, 1.200);
		Set Global Variable(R, 28);
	}
}

rule("widow level 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(S) == 2;
		Hero Of(Players In Slot(0, Team 1)) == Hero(Widowmaker);
	}

	actions
	{
		Set Global Variable(T, 0.700);
		Set Global Variable(R, 36);
	}
}

rule("ana level 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(S) == 0;
		Hero Of(Players In Slot(0, Team 1)) == Hero(Ana);
	}

	actions
	{
		Set Global Variable(T, 2);
		Set Global Variable(R, 20);
	}
}

rule("ana level 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(S) == 1;
		Hero Of(Players In Slot(0, Team 1)) == Hero(Ana);
	}

	actions
	{
		Set Global Variable(T, 1.200);
		Set Global Variable(R, 28);
	}
}

rule("ana level 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(S) == 2;
		Hero Of(Players In Slot(0, Team 1)) == Hero(Ana);
	}

	actions
	{
		Set Global Variable(T, 0.700);
		Set Global Variable(R, 36);
	}
}

rule("ashe level 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(S) == 0;
		Hero Of(Players In Slot(0, Team 1)) == Hero(Ashe);
	}

	actions
	{
		Set Global Variable(T, 2);
		Set Global Variable(R, 20);
	}
}

rule("ashe level 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(S) == 1;
		Hero Of(Players In Slot(0, Team 1)) == Hero(Ashe);
	}

	actions
	{
		Set Global Variable(T, 1.200);
		Set Global Variable(R, 28);
	}
}

rule("ashe level 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(S) == 2;
		Hero Of(Players In Slot(0, Team 1)) == Hero(Ashe);
	}

	actions
	{
		Set Global Variable(T, 0.700);
		Set Global Variable(R, 36);
	}
}
</code></pre>
